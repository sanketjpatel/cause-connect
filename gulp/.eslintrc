{
    "env": {
        "node": true,
        "mocha": true
    },
    "globals": {
        "expect": true,
        "inject": true,
        "angular": true,
        "sinon": true,
        "_": true
    },
    "plugins": [
        "angular"
    ],
    "rules": {
        /**
         * Strict mode
         *
         * https://github.com/uptaketech/javascript#20.4
         *
         * http://eslint.org/docs/rules/strict
         */
        "strict": [2, "function"],

        /**
         * Variables
         */
        "no-shadow": 2, // http://eslint.org/docs/rules/no-shadow
        "no-shadow-restricted-names": 2, // http://eslint.org/docs/rules/no-shadow-restricted-names

        /**
         * Variables that are declared and not used anywhere in the code
         * are most likely an error due to incomplete refactoring.
         *
         * Such variables take up space in the code and can lead to confusion by readers.
         *
         * Only locally-declared variables are checked for use.
         *
         * Only the last defined argument must be used.
         *
         * http://eslint.org/docs/rules/no-unused-vars
         */
        "no-unused-vars": [2, {
            "vars": "local",
            "args": "after-used"
        }],

        /**
         * In JavaScript, prior to ES6, variable and function declarations are
         * hoisted to the top of a scope, so it's possible to use identifiers
         * before their formal declarations in code.
         *
         * This can be confusing and it is best to always declare variables before using them.
         *
         * Functions are excempt from this rule, as they are hoisted when declared.
         *
         * http://eslint.org/docs/rules/no-use-before-define
         */
        "no-use-before-define": [2, "nofunc"],

        /**
         * Possible errors
         */

        /**
         * This causes errors in IE 6, 7, and 9
         *
         * https://github.com/UptakeTech/javascript#13.2
         *
         * http://eslint.org/docs/rules/comma-dangle
         */
        "comma-dangle": [2, "never"],
        "no-cond-assign": [2, "always"], // http://eslint.org/docs/rules/no-cond-assign

        /**
         * Use $log. It intelligently prints to the console when needed and internally
         * holds logs while testing.
         *
         * http://eslint.org/docs/rules/no-console
         */
        "no-console": 1,

        "no-debugger": 1, // http://eslint.org/docs/rules/no-debugger

        /**
         * use $modal for a better style alert
         *
         * http://eslint.org/docs/rules/no-alert
         */
        "no-alert": 1,
        "no-constant-condition": 1,      // http://eslint.org/docs/rules/no-constant-condition
        "no-dupe-keys": 2,               // http://eslint.org/docs/rules/no-dupe-keys
        "no-duplicate-case": 2,          // http://eslint.org/docs/rules/no-duplicate-case
        "no-empty": 2,                   // http://eslint.org/docs/rules/no-empty
        "no-ex-assign": 2,               // http://eslint.org/docs/rules/no-ex-assign
        "no-extra-boolean-cast": 2,      // http://eslint.org/docs/rules/no-extra-boolean-cast
        "no-extra-semi": 2,              // http://eslint.org/docs/rules/no-extra-semi
        "no-func-assign": 2,             // http://eslint.org/docs/rules/no-func-assign
        "no-inner-declarations": 2,      // http://eslint.org/docs/rules/no-inner-declarations
        "no-invalid-regexp": 2,          // http://eslint.org/docs/rules/no-invalid-regexp
        "no-irregular-whitespace": 2,    // http://eslint.org/docs/rules/no-irregular-whitespace
        "no-obj-calls": 2,               // http://eslint.org/docs/rules/no-obj-calls
        "no-reserved-keys": 0,           // http://eslint.org/docs/rules/no-reserved-keys
        "no-sparse-arrays": 2,           // http://eslint.org/docs/rules/no-sparse-arrays
        "no-unreachable": 2,             // http://eslint.org/docs/rules/no-unreachable
        "use-isnan": 2,                  // http://eslint.org/docs/rules/use-isnan
        "block-scoped-var": 2,           // http://eslint.org/docs/rules/block-scoped-var

        /**
         * Best practices
         */
        "consistent-return": 2,          // http://eslint.org/docs/rules/consistent-return

        /**
         * Use braces for multi-line blocks
         *
         * https://github.com/uptaketech/javascript#10.1
         *
         * http://eslint.org/docs/rules/curly
         */
        "curly": [2, "multi-line"],
        "default-case": 2,               // http://eslint.org/docs/rules/default-case

        /**
         * Use dot notation to access properties
         *
         * ES5 allows restricted names as properties
         *
         * https://github.com/uptaketech/javascript#6.1
         *
         * http://eslint.org/docs/rules/dot-notation
         */
        "dot-notation": [2, {
            "allowKeywords": true
        }],

        /**
         * Use strict equality
         *
         * https://github.com/UptakeTech/javascript#9.1
         *
         * http://eslint.org/docs/rules/eqeqeq
         */
        "eqeqeq": 2,
        "guard-for-in": 2,               // http://eslint.org/docs/rules/guard-for-in
        "no-caller": 2,                  // http://eslint.org/docs/rules/no-caller

        /**
         * Use shortcircuiting when possible as it leads to clearer code
         *
         * https://github.com/UptakeTech/javascript#9.3
         *
         * http://eslint.org/docs/rules/no-else-return
         */
        "no-else-return": 2,
        "no-eq-null": 2,                 // http://eslint.org/docs/rules/no-eq-null
        "no-eval": 2,                    // http://eslint.org/docs/rules/no-eval
        "no-extend-native": 2,           // http://eslint.org/docs/rules/no-extend-native
        "no-extra-bind": 2,              // http://eslint.org/docs/rules/no-extra-bind
        "no-fallthrough": 2,             // http://eslint.org/docs/rules/no-fallthrough
        "no-floating-decimal": 2,        // http://eslint.org/docs/rules/no-floating-decimal
        "no-implied-eval": 2,            // http://eslint.org/docs/rules/no-implied-eval
        "no-lone-blocks": 2,             // http://eslint.org/docs/rules/no-lone-blocks
        "no-loop-func": 2,               // http://eslint.org/docs/rules/no-loop-func
        "no-multi-str": 2,               // http://eslint.org/docs/rules/no-multi-str
        "no-native-reassign": 2,         // http://eslint.org/docs/rules/no-native-reassign
        "no-new": 2,                     // http://eslint.org/docs/rules/no-new
        "no-new-func": 2,                // http://eslint.org/docs/rules/no-new-func
        "no-new-wrappers": 2,            // http://eslint.org/docs/rules/no-new-wrappers
        "no-octal": 2,                   // http://eslint.org/docs/rules/no-octal
        "no-octal-escape": 2,            // http://eslint.org/docs/rules/no-octal-escape
        "no-param-reassign": 2,          // http://eslint.org/docs/rules/no-param-reassign
        "no-proto": 2,                   // http://eslint.org/docs/rules/no-proto
        "no-redeclare": 2,               // http://eslint.org/docs/rules/no-redeclare
        "no-return-assign": 2,           // http://eslint.org/docs/rules/no-return-assign
        "no-script-url": 2,              // http://eslint.org/docs/rules/no-script-url
        "no-self-compare": 2,            // http://eslint.org/docs/rules/no-self-compare
        "no-sequences": 2,               // http://eslint.org/docs/rules/no-sequences
        "no-throw-literal": 2,           // http://eslint.org/docs/rules/no-throw-literal
        "no-with": 2,                    // http://eslint.org/docs/rules/no-with
        "radix": 2,                      // http://eslint.org/docs/rules/radix
        "vars-on-top": 2,                // http://eslint.org/docs/rules/vars-on-top

        /**
         * Immediately invoked functions should wrap the call expression in parenthesis
         *
         * http://eslint.org/docs/rules/wrap-iife
         */
        "wrap-iife": [2, "outside"],
        "yoda": 2,                       // http://eslint.org/docs/rules/yoda

        /**
         * Style
         */

        /**
         * We settled on 4 spaces.
         *
         * http://eslint.org/docs/rules/
         */
        "indent": [2, 4],

        /**
         * Use "one true brace style" braces as they are the most common.
         *
         * https://en.wikipedia.org/wiki/Indent_style#Variant:_1TBS
         *
         * http://eslint.org/docs/rules/brace-style
         */
        "brace-style": [
            2,
            "1tbs", {
                "allowSingleLine": true
            }
        ],

        /**
         * We use single quotes.
         *
         * You can avoid escaping quotes inside strings
         * by using double quotes.
         */
        "quotes": [
            2, "single", "avoid-escape"  // http://eslint.org/docs/rules/quotes
        ],

        /**
         * camelCase objects, function names, and instances
         *
         * https://github.com/uptaketech/javascript#16.2
         *
         * http://eslint.org/docs/rules/camelcase
         */
        "camelcase": [2, {
            "properties": "never"
        }],

        /**
         * Put space after your commas, not before
         *
         * http://eslint.org/docs/rules/comma-spacing
         */
        "comma-spacing": [2, {
            "before": false,
            "after": true
        }],

        /**
         * Leading commas: Nope
         *
         * https://github.com/UptakeTech/javascript#13.1
         *
         * http://eslint.org/docs/rules/comma-style
         */
        "comma-style": [2, "last"],
        "eol-last": 2,                   // http://eslint.org/docs/rules/eol-last
        "func-names": 0,                 // http://eslint.org/docs/rules/func-names

        /**
         * Put space after your key's colon, not before
         *
         * http://eslint.org/docs/rules/key-spacing
         */
        "key-spacing": [2, {
            "beforeColon": false,
            "afterColon": true
        }],

        /**
         * Capitalize functions meant to be instantiated with `new`
         * to clarify and identify them as constructors.
         *
         * http://eslint.org/docs/rules/new-cap
         */
        "new-cap": [2, {
            "newIsCap": true
        }],

        /**
         * Keep things clean and tidy.
         *
         * http://eslint.org/docs/rules/no-multiple-empty-lines
         */
        "no-multiple-empty-lines": [2, {
            "max": 2
        }],
        "no-nested-ternary": 2,          // http://eslint.org/docs/rules/no-nested-ternary
        "no-new-object": 2,              // http://eslint.org/docs/rules/no-new-object
        "no-spaced-func": 2,             // http://eslint.org/docs/rules/no-spaced-func
        "no-trailing-spaces": 2,         // http://eslint.org/docs/rules/no-trailing-spaces
        "no-extra-parens": [2, "functions"], // http://eslint.org/docs/rules/no-extra-parens
        "no-underscore-dangle": 0,       // http://eslint.org/docs/rules/no-underscore-dangle

        /**
         * Use one `var` declaration per variable.
         *
         * https://github.com/UptakeTech/javascript#7.2
         *
         * http://eslint.org/docs/rules/one-var
         */
        "one-var": [2, "never"],

        /**
         * Keep blocks small and tidy
         *
         * http://eslint.org/docs/rules/padded-blocks
         */
        "padded-blocks": [2, "never"],

        /**
         * Require semicolons
         *
         * https://github.com/uptaketech/javascript#14.1
         *
         * http://eslint.org/docs/rules/semi
         */
        "semi": [2, "always"],

        /**
         * Always put a space after a semicolon, never before
         *
         * http://eslint.org/docs/rules/semi-spacing
         */
        "semi-spacing": [2, {
            "before": false,
            "after": true
        }],
        "space-after-keywords": 2,       // http://eslint.org/docs/rules/space-after-keywords
        "space-before-blocks": 2,        // http://eslint.org/docs/rules/space-before-blocks
        "space-before-function-paren": [0, "never"], // http://eslint.org/docs/rules/space-before-function-paren
        "space-infix-ops": 2,            // http://eslint.org/docs/rules/space-infix-ops
        "space-return-throw-case": 2,    // http://eslint.org/docs/rules/space-return-throw-case

        // http://eslint.org/docs/rules/space-before-keywords
        "space-before-keywords": [2, "always"],

        // http://eslint.org/docs/rules/no-restricted-syntax
        "no-restricted-syntax": [2, "WithStatement"],

        // http://eslint.org/docs/rules/global-require
        "global-require": 2,

        /**
         * Always insert space at the beginning of a comment
         *
         * "-" and "+" characters are excluded
         *
         * http://eslint.org/docs/rules/spaced-comment
         */
        "spaced-comment": [2, "always", {
            "exceptions": ["-", "+"]
        }],

        "angular/controller-name": [2, "/Up[A-Z].*Controller$/"],

        "angular/controller-as-vm": 0,

        /**
         * Directive names must be prefixed with "up"
         * to provide namespacing from other modules
         *
         * You should ideally add another prefix following "up"
         * which further indicates the specific "up" module
         *
         * https://github.com/uptaketech/angular-styleguide#style-y073
         */
        "angular/directive-name": [2, "up"],

        /**
         * Module names must be prefixed with "up"
         * to provide namespacing from other modules
         *
         * You should ideally group all modules in a package
         * into a submodule of "up"
         *
         * https://github.com/uptaketech/angular-styleguide#style-y020
         */
        "angular/module-name": [2, "up"],

        "angular/di-order": 2,

        "angular/empty-controller": 2,

        "angular/filter-name": [2, "up"],

        /**
         * Use the convenience aliases of `inject` and `module` from ngMock
         * instead of directly accessing `angular.mock.inject` or `angular.mock.module`
         */
        "angular/no-angular-mock": 2,

        "angular/on-watch": 0,

        /**
         * Service names must be prefixed with "up"
         * to provide namespacing from other modules.
         *
         * You should ideally add another prefix following "up"
         * which further indicates the specific "up" module
         *
         * https://github.com/uptaketech/angular-styleguide#style-y125
         */
        "angular/service-name": [2, "up"]
    }
}
